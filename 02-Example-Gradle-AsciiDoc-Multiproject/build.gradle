plugins {
    id("org.asciidoctor.jvm.pdf") version "3.3.+"
    id("org.asciidoctor.jvm.gems") version "3.3.+"
    id("org.asciidoctor.jvm.convert") version "3.3.+"
    id("org.asciidoctor.jvm.epub") version '3.3.+'
    id("org.asciidoctor.jvm.revealjs") version "3.3.+"
    id 'distribution'  // Variante-III
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'org.asciidoctor.jvm.gems'
    apply plugin: 'org.asciidoctor.jvm.pdf'
    apply plugin: 'org.asciidoctor.jvm.epub'

    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    // Variante-II:
    configurations {
        artifacts
    }

    asciidoctor {
        dependsOn asciidoctorGemsPrepare
        baseDirFollowsSourceFile()
        // Variante-I: outputDir  file("${rootProject.buildDir}/docs/HTML")
        attributes \
            'build-gradle': file('build.gradle'),
            'sourcedir': project.sourceSets.main.java.srcDirs[0],
            'endpoint-url': 'http://example.org',
            'imagesdir': 'images',
            'toc': 'left',
            'icons': 'font',
            'setanchors': '',
            'idprefix': '',
            'idseparator': '-',
            'docinfo': 'shared'
    }

    asciidoctorEpub {
        dependsOn asciidoctorGemsPrepare
        ebookFormats EPUB3
        // Variante-I: outputDir  file("${rootProject.buildDir}/docs/EPUB")
        attributes += [
            'build-gradle': file('build.gradle'),
            // Required to place image in project root.
            'imagesoutdir': '../../../images'
        ]
    }

    asciidoctorPdf {
        dependsOn asciidoctorGemsPrepare

        baseDirFollowsSourceFile()
        // Variante-I: outputDir file("${rootProject.buildDir}/docs/PDF")
        asciidoctorj {
            requires 'rouge'
            attributes 'build-gradle': file('build.gradle'),
                'sourcedir': sourceSets.main.java.srcDirs[0],
                'endpoint-url': 'http://example.org',
                'source-highlighter': 'rouge',
                'imagesdir': './images',
                'toc': 'left',
                'icons': 'font',
                'idprefix': '',
                'idseparator': '-'
        }
    }

    // Variante-II:
    artifacts {
        archives(asciidoctorPdf.outputDir) {
            builtBy asciidoctorPdf
        }
        archives(asciidoctorEpub.outputDir) {
            builtBy asciidoctorEpub
         }
        archives(asciidoctor.outputDir) {
            builtBy asciidoctor
        }
    }

    asciidoctor.dependsOn asciidoctorPdf, asciidoctorEpub

    build.dependsOn  asciidoctor
}

task openPDF(type: Exec) {
    commandLine  "bash", "-c", "find . -name '*.pdf' -exec okular {} +"
    dependsOn build
}

task openHTML(type: Exec) {
    commandLine  "bash", "-c", "find . -name '*.html' -exec firefox {} +"
    dependsOn build
}

task open() {
    dependsOn openHTML, openPDF
}


// Variante-II:
task aggregateArtifacts(type: Copy) {
    from subprojects.collect { project ->
        project.configurations.archives.artifacts.files
    }
    into file('build/aggregate')
}

// Variante-III:
distributions {
    main {
        distributionBaseName = project.name
        distributionClassifier = 'classifier'
        version = project.version

        contents {
            from(subprojects.collect { it.tasks.getByName('assemble') })
            from(subprojects.collect { it.tasks.getByName('asciidoctorPdf') }, {
                into "pdf"
            })
            from(subprojects.collect { it.tasks.getByName('asciidoctorEpub') }, {
                into "epub"
            })
            from(subprojects.collect { it.tasks.getByName('asciidoctor') }, {
                into "html"
            })
        }
    }
}
